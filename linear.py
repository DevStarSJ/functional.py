import math

import functional as F

def shape(matrix):
    if not F.is_sequence(matrix): return None

    len1 = len(matrix)
    if not (len1 > 0 and F.is_sequence(matrix[0])): return None

    len2 = len(matrix[0])

    return [len1, len2]

def matmul(X, Y):
    return [[sum(a*b for a, b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]

def matadd(X, Y):
    return [x+y for x,y in zip(X,Y)]

def sigmoid(z):
    return 1 / (1 + math.e ** -z)

def softmax2D(M, t = 1.0):
    E = F.map(M, lambda row: [math.exp(x/t) for x in row])
    total = F.sum(F.map(E, lambda row: F.sum(row)))
    return F.map(E, lambda row: [x/total for x in row])

def softmax(M, t = 1.0):
    E = [math.exp(x/t) for x in M]
    total = F.sum(E)
    return [x/total for x in E]

def argmax(M):
    max_num = -1
    max_index = -1
    for i, v in enumerate(M):
        if v > max_num:
            max_num, max_index = v, i
    return max_index

A = [[1,2],[3,4]]
B = [[5,6],[7,8]]
#
# print(matmul(A,B))

# print(softmax(A))
#
# print([x for x in [row for row in A]])

"""
[array([[  2.13611865e+00,  -8.89517546e-01,  -1.32968938e+00,
         -1.25107193e+00,  -5.74249804e-01,   3.37917477e-01,
         -1.52714312e+00],
       [  1.52570915e+00,   3.22602081e+00,  -1.19343829e+00,
         -5.62257648e-01,  -1.69216082e-01,  -1.20238590e+00,
          2.41392016e-01],
       [ -3.52719498e+00,  -7.78525710e-01,  -2.51477420e-01,
          5.77157617e-01,   3.23312134e-01,  -7.56336510e-01,
          1.26832283e+00],
       [  2.23171139e+00,  -5.57940722e-01,   3.58952396e-02,
         -4.44915235e-01,  -1.79673791e-01,   3.14061403e-01,
          8.77738357e-01],
       [ -1.29149318e+00,   1.68185318e+00,  -7.53869191e-02,
         -3.64886343e-01,  -1.58898935e-01,   1.88084745e+00,
         -1.14170408e+00],
       [  4.30160940e-01,  -5.98917067e-01,  -1.58209848e+00,
          1.55575001e+00,   7.64159501e-01,  -3.23461324e-01,
          2.57028967e-01],
       [  1.24506408e-03,   4.84872103e-01,   5.27459383e-01,
         -8.81645381e-01,   1.40823269e+00,  -2.43089914e-01,
          2.04915047e+00],
       [  2.06941962e+00,  -1.55823338e+00,   8.15798283e-01,
          1.06008637e+00,   1.59453881e+00,  -2.40302658e+00,
         -3.29411793e+00],
       [ -1.05928421e+00,   1.92703918e-01,   5.90939641e-01,
          1.09072852e+00,  -5.93681112e-02,  -8.41702402e-01,
         -1.76333427e+00],
       [  5.29984832e-01,   1.01416297e-01,  -6.49367750e-01,
         -1.33617997e+00,   2.65395254e-01,   1.59261262e+00,
         -6.70030177e-01],
       [ -1.26675773e+00,   8.05730045e-01,   1.49659085e+00,
         -9.53378677e-01,   4.12556566e-02,  -1.10830617e+00,
          1.42527056e+00],
       [ -1.35953736e+00,  -3.24375778e-01,  -1.78405988e+00,
          8.73955309e-01,  -7.33323455e-01,  -3.47591966e-01,
         -8.38429749e-01],
       [ -2.42980689e-01,  -4.24829841e-01,  -2.11683750e-01,
         -1.66822231e+00,   2.47893959e-01,   8.75280619e-01,
          2.07229763e-01],
       [ -2.06811681e-01,   7.03330338e-01,   1.14589977e+00,
          6.96249157e-02,  -1.95677102e+00,  -2.60302591e+00,
         -1.67487729e+00],
       [ -5.24885833e-01,  -5.58490634e-01,  -5.34574389e-01,
         -1.77813923e+00,  -8.46548259e-01,   1.43160895e-01,
         -1.89817786e-01],
       [  1.28699899e+00,   7.90055171e-02,  -2.14517906e-01,
          6.83293045e-01,  -3.12360317e-01,  -1.67898703e+00,
         -1.34854233e+00]], dtype=float32), array([ 0.68421906, -0.1409331 , -0.07095003, -0.91207933, -2.53231215,
       -2.39159274,  0.41250759], dtype=float32)]

"""

W = [[  2.13611865e+00,  -8.89517546e-01,  -1.32968938e+00,
         -1.25107193e+00,  -5.74249804e-01,   3.37917477e-01,
         -1.52714312e+00],
       [  1.52570915e+00,   3.22602081e+00,  -1.19343829e+00,
         -5.62257648e-01,  -1.69216082e-01,  -1.20238590e+00,
          2.41392016e-01],
       [ -3.52719498e+00,  -7.78525710e-01,  -2.51477420e-01,
          5.77157617e-01,   3.23312134e-01,  -7.56336510e-01,
          1.26832283e+00],
       [  2.23171139e+00,  -5.57940722e-01,   3.58952396e-02,
         -4.44915235e-01,  -1.79673791e-01,   3.14061403e-01,
          8.77738357e-01],
       [ -1.29149318e+00,   1.68185318e+00,  -7.53869191e-02,
         -3.64886343e-01,  -1.58898935e-01,   1.88084745e+00,
         -1.14170408e+00],
       [  4.30160940e-01,  -5.98917067e-01,  -1.58209848e+00,
          1.55575001e+00,   7.64159501e-01,  -3.23461324e-01,
          2.57028967e-01],
       [  1.24506408e-03,   4.84872103e-01,   5.27459383e-01,
         -8.81645381e-01,   1.40823269e+00,  -2.43089914e-01,
          2.04915047e+00],
       [  2.06941962e+00,  -1.55823338e+00,   8.15798283e-01,
          1.06008637e+00,   1.59453881e+00,  -2.40302658e+00,
         -3.29411793e+00],
       [ -1.05928421e+00,   1.92703918e-01,   5.90939641e-01,
          1.09072852e+00,  -5.93681112e-02,  -8.41702402e-01,
         -1.76333427e+00],
       [  5.29984832e-01,   1.01416297e-01,  -6.49367750e-01,
         -1.33617997e+00,   2.65395254e-01,   1.59261262e+00,
         -6.70030177e-01],
       [ -1.26675773e+00,   8.05730045e-01,   1.49659085e+00,
         -9.53378677e-01,   4.12556566e-02,  -1.10830617e+00,
          1.42527056e+00],
       [ -1.35953736e+00,  -3.24375778e-01,  -1.78405988e+00,
          8.73955309e-01,  -7.33323455e-01,  -3.47591966e-01,
         -8.38429749e-01],
       [ -2.42980689e-01,  -4.24829841e-01,  -2.11683750e-01,
         -1.66822231e+00,   2.47893959e-01,   8.75280619e-01,
          2.07229763e-01],
       [ -2.06811681e-01,   7.03330338e-01,   1.14589977e+00,
          6.96249157e-02,  -1.95677102e+00,  -2.60302591e+00,
         -1.67487729e+00],
       [ -5.24885833e-01,  -5.58490634e-01,  -5.34574389e-01,
         -1.77813923e+00,  -8.46548259e-01,   1.43160895e-01,
         -1.89817786e-01],
       [  1.28699899e+00,   7.90055171e-02,  -2.14517906e-01,
          6.83293045e-01,  -3.12360317e-01,  -1.67898703e+00,
         -1.34854233e+00]];

b = [ 0.68421906, -0.1409331 , -0.07095003, -0.91207933, -2.53231215,
       -2.39159274,  0.41250759];

#X = [[1],[0],[0],[1],[0],[0],[1],[1],[1],[1],[0],[0],[4],[0],[0],[1]];
X = [[0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0]]#[[1,0,0,1,0,0,1,1,1,1,0,0,4,0,0,1]]
H = matadd(matmul(X,W)[0],b)
print(H)
S = [sigmoid(x) for x in H]
print(S)
M = softmax(S)
print(M)
print(sum(M))
print(argmax(M))




print([1,2] + [3,4])

